# Read the text file generated by the Node.js script
$Text = Get-Content './tasks.txt' | Out-String

$Word = New-Object -ComObject "Word.Application"

# This keeps Microsoft Word invisible while it is open
$Word.Visible = $False

# Create a new Word document
$Document = $Word.Documents.Add()

# Create a range at the end of the Word document - I'm not an expert on Word, but a 'range' appears to just be a general area in a Word document
$Range = $Document.Content

# Insert the text from the .txt file into the Word document
$Range.Text = $Text

# Access the PageSetup object to adjust margins (1 inch = 72 points)
# If you are testing with a different printer than the Epson TM-T20III, and the formatting seems off, you may want to play with these value
$PageSetup = $Document.PageSetup
$PageSetup.LeftMargin = 36  # Adjust the left margin as needed (e.g., 0.5 inch)
$PageSetup.BottomMargin = 0
$PageSetup.TopMargin = 0

# Save the document - this file isn't used for anything, but not saving it forces a Word window to appear
$Document.SaveAs('tasks.docx')

# This will send the word document for printing to the default printer
$Document.PrintOut()

# This command appears to be necessary in order to prevent some strange errors where Microsoft Word gets stuck running - it's more or less a 20 second timer
# If you have weird behavior trying to run the script multiple times, you can try playing with this value.
Start-Sleep -Seconds 20

$Document.Close()
$Word.Quit([ref]$false)

# Release COM objects
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Document) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Word) | Out-Null